"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hadler = void 0;
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();
class Hadler {
    constructor() {
        this.createConversation = async (conversation) => {
            const params = {
                TableName: process.env.CONVERSATIONS_TABLE,
                Item: conversation
            };
            try {
                await docClient.put(params).promise();
                return conversation;
            }
            catch (err) {
                console.log('DynamoDB error: ', err);
                return null;
            }
        };
        this.createUser = async (user) => {
            const params = {
                TableName: process.env.USERS_TABLE,
                Item: user
            };
            try {
                await docClient.put(params).promise();
                return user;
            }
            catch (err) {
                console.log('DynamoDB error: ', err);
                return null;
            }
        };
        this.createMessage = async (message) => {
            const params = {
                TableName: process.env.MESSAGES_TABLE,
                Item: message
            };
            try {
                await docClient.put(params).promise();
                return message;
            }
            catch (err) {
                console.log('DynamoDB error: ', err);
                return null;
            }
        };
        this.getConversation = async (conversationId) => {
            const params = {
                TableName: process.env.CONVERSATIONS_TABLE,
                Key: { id: conversationId }
            };
            try {
                const { Item } = await docClient.get(params).promise();
                return Item;
            }
            catch (err) {
                console.log('DynamoDB error: ', err);
            }
        };
        this.getConversations = async () => {
            const params = {
                TableName: process.env.CONVERSATIONS_TABLE,
            };
            try {
                const data = await docClient.scan(params).promise();
                return data.Items;
            }
            catch (err) {
                console.log('DynamoDB error: ', err);
                return null;
            }
        };
    }
}
exports.Hadler = Hadler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUdwRCxNQUFhLE1BQU07SUFFZjtRQUVBLHVCQUFrQixHQUFHLEtBQUssRUFBRSxZQUEwQixFQUFFLEVBQUU7WUFDdEQsTUFBTSxNQUFNLEdBQUc7Z0JBQ1gsU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CO2dCQUMxQyxJQUFJLEVBQUUsWUFBWTthQUNyQixDQUFBO1lBQ0QsSUFBSTtnQkFDQSxNQUFNLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3RDLE9BQU8sWUFBWSxDQUFDO2FBQ3ZCO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDckMsT0FBTyxJQUFJLENBQUM7YUFDZjtRQUNMLENBQUMsQ0FBQTtRQUVELGVBQVUsR0FBRyxLQUFLLEVBQUUsSUFBVSxFQUFFLEVBQUU7WUFDOUIsTUFBTSxNQUFNLEdBQUc7Z0JBQ1gsU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVztnQkFDbEMsSUFBSSxFQUFFLElBQUk7YUFDYixDQUFBO1lBQ0QsSUFBSTtnQkFDQSxNQUFNLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3RDLE9BQU8sSUFBSSxDQUFDO2FBQ2Y7WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDVixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUNyQyxPQUFPLElBQUksQ0FBQzthQUNmO1FBQ0wsQ0FBQyxDQUFBO1FBRUQsa0JBQWEsR0FBRyxLQUFLLEVBQUUsT0FBZ0IsRUFBRSxFQUFFO1lBQ3ZDLE1BQU0sTUFBTSxHQUFHO2dCQUNYLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWM7Z0JBQ3JDLElBQUksRUFBRSxPQUFPO2FBQ2hCLENBQUE7WUFDRCxJQUFJO2dCQUNBLE1BQU0sU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDdEMsT0FBTyxPQUFPLENBQUM7YUFDbEI7WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDVixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUNyQyxPQUFPLElBQUksQ0FBQzthQUNmO1FBQ0wsQ0FBQyxDQUFBO1FBRUQsb0JBQWUsR0FBRyxLQUFLLEVBQUUsY0FBc0IsRUFBRSxFQUFFO1lBQy9DLE1BQU0sTUFBTSxHQUFHO2dCQUNYLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQjtnQkFDMUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLGNBQWMsRUFBRTthQUM5QixDQUFBO1lBQ0QsSUFBSTtnQkFDQSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO2dCQUN0RCxPQUFPLElBQUksQ0FBQTthQUNkO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQTthQUN2QztRQUNMLENBQUMsQ0FBQTtRQUVELHFCQUFnQixHQUFHLEtBQUssSUFBSSxFQUFFO1lBQzFCLE1BQU0sTUFBTSxHQUFHO2dCQUNYLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQjthQUM3QyxDQUFBO1lBQ0QsSUFBSTtnQkFDQSxNQUFNLElBQUksR0FBRyxNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7Z0JBQ25ELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQTthQUNwQjtZQUFDLE9BQU8sR0FBRyxFQUFFO2dCQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUE7Z0JBQ3BDLE9BQU8sSUFBSSxDQUFBO2FBQ2Q7UUFDTCxDQUFDLENBQUE7SUFwRWMsQ0FBQztDQXFFbkI7QUF2RUQsd0JBdUVDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuY29uc3QgZG9jQ2xpZW50ID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuaW1wb3J0IHsgTWVzc2FnZSwgQ29udmVyc2F0aW9uLCBVc2VyIH0gZnJvbSAnLi4vbW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgSGFkbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge31cblxuICAgIGNyZWF0ZUNvbnZlcnNhdGlvbiA9IGFzeW5jIChjb252ZXJzYXRpb246IENvbnZlcnNhdGlvbikgPT4ge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LkNPTlZFUlNBVElPTlNfVEFCTEUsXG4gICAgICAgICAgICBJdGVtOiBjb252ZXJzYXRpb25cbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgZG9jQ2xpZW50LnB1dChwYXJhbXMpLnByb21pc2UoKTtcbiAgICAgICAgICAgIHJldHVybiBjb252ZXJzYXRpb247XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0R5bmFtb0RCIGVycm9yOiAnLCBlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVVc2VyID0gYXN5bmMgKHVzZXI6IFVzZXIpID0+IHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5VU0VSU19UQUJMRSxcbiAgICAgICAgICAgIEl0ZW06IHVzZXJcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgZG9jQ2xpZW50LnB1dChwYXJhbXMpLnByb21pc2UoKTtcbiAgICAgICAgICAgIHJldHVybiB1c2VyO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEeW5hbW9EQiBlcnJvcjogJywgZXJyKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlTWVzc2FnZSA9IGFzeW5jIChtZXNzYWdlOiBNZXNzYWdlKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuTUVTU0FHRVNfVEFCTEUsXG4gICAgICAgICAgICBJdGVtOiBtZXNzYWdlXG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGRvY0NsaWVudC5wdXQocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRHluYW1vREIgZXJyb3I6ICcsIGVycik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldENvbnZlcnNhdGlvbiA9IGFzeW5jIChjb252ZXJzYXRpb25JZDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuQ09OVkVSU0FUSU9OU19UQUJMRSxcbiAgICAgICAgICAgIEtleTogeyBpZDogY29udmVyc2F0aW9uSWQgfVxuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IEl0ZW0gfSA9IGF3YWl0IGRvY0NsaWVudC5nZXQocGFyYW1zKS5wcm9taXNlKClcbiAgICAgICAgICAgIHJldHVybiBJdGVtXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0R5bmFtb0RCIGVycm9yOiAnLCBlcnIpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRDb252ZXJzYXRpb25zID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LkNPTlZFUlNBVElPTlNfVEFCTEUsXG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBkb2NDbGllbnQuc2NhbihwYXJhbXMpLnByb21pc2UoKVxuICAgICAgICAgICAgcmV0dXJuIGRhdGEuSXRlbXNcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRHluYW1vREIgZXJyb3I6ICcsIGVycilcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICB9XG59XG5cbiJdfQ==