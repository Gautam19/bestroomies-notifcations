enum MessageType {
  TextChat
  ImageAttachment
  VideoAttachment
  LocationAttachment
  VideoChat
}

enum NotificationType {
  Shortlist
}

type Notification {
  id: String
  type: NotificationType!
  metaData: String
  isRead: Boolean
  createdAt: String
}

input NotificationInput {
  type: NotificationType!
  metaData: String!
  isRead: Boolean!
}

type Conversation {
  id: String!
  #  The Conversation's name.
  name: String!
  picture: String
  createdAt: String
  messages: [Message]
}

type Message {
  id: String!
  value: String!
  createdAt: String
  authorId: String!
  recipientId: String!
  seen: Boolean
  #  The id of the Conversation this message belongs to. This is the table primary key.
  conversationId: String!
  type: MessageType!
}

type User {
  id: String
  firstName: String
  lastName: String
  picture: String
  contactNumber: String
  userType: Int
  userFor: Int
  email: String
}

input ConversationInput {
  id: String
  name: String
}

input MessageInput {
  value: String!
  createdAt: String
  authorId: String!
  recipientId: String!
  seen: Boolean
  conversationId: String!
  type: MessageType!
}

type Mutation {
  createConversation(conversation: ConversationInput): Conversation
  addMessage(message: MessageInput): Message
  createUser(user: UserInput): User
  addNotification(notification: NotificationInput): Notification
}

type Query {
  conversations: [Conversation]
  conversation(id: String!): Conversation
  users: [User]
  notifications: [Notification]
}

type Subscription {
  onCreateConversation: Conversation
    @aws_subscribe(mutations: ["createConversation"])
  onAddMessage: Message @aws_subscribe(mutations: ["addMessage"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onCreateNotification: Notification
    @aws_subscribe(mutations: ["addNotification"])
}

input UserInput {
  id: String!
  firstName: String!
  lastName: String!
  picture: String
  contactNumber: String
  userType: Int
  userFor: Int
  email: String
}
